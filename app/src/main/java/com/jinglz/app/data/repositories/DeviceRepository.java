package com.jinglz.app.data.repositories;

import android.Manifest;
import android.content.Context;
import android.database.ContentObserver;
import android.media.AudioManager;
import android.os.Build;
import android.os.Handler;
import android.provider.Settings;
import android.support.v4.app.NotificationManagerCompat;

import com.google.firebase.iid.FirebaseInstanceId;
import com.jinglz.app.BuildConfig;
import com.jinglz.app.data.network.models.EnvironmentInfo;
import com.jinglz.app.utils.PermissionUtils;
import com.jinglz.app.utils.rx.ConnectivityUtils;

import javax.inject.Inject;
import javax.inject.Singleton;

import rx.Emitter;
import rx.Observable;
import rx.Single;

@Singleton
public class DeviceRepository {

    private static final String TAG = "DeviceRepository";

    private final Context mContext;

    /**
     * Constructs new DeviceRepository with specified context.
     *
     * @param context To fetch application-specific content
     */
    @Inject
    public DeviceRepository(Context context) {
        mContext = context;
    }

    /**
     * This method is used to retrieve unique device id.
     *
     * @return String variable containing unique id
     */
    @SuppressWarnings("HardwareIds")
    public String getUniqueDeviceId() {
        return Settings.Secure.getString(mContext.getContentResolver(), Settings.Secure.ANDROID_ID);
    }

    /**
     * This method is used to check if Internet is available. it will return boolean value
     * by checking net connection with method {@link ConnectivityUtils#hasInternetObservable(Context)}
     *
     * @return Observable object of boolean
     */
    public Observable<Boolean> checkInternet() {
        return ConnectivityUtils.hasInternetObservable(mContext);
    }

    /**
     * This method is used to check the volume level of the device. it will use AudioManager services to
     * check the maximum volume.
     *
     * @return integer value containing volume
     */
    public Observable<Integer> volumeLevelObservable() {
        final AudioManager audioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);
        return Observable.<Integer>fromEmitter(emitter -> {
            final int maxVolume = audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);

            final ContentObserver volumeObserver = new ContentObserver(new Handler()) {
                @Override
                public void onChange(boolean selfChange) {
                    super.onChange(selfChange);
                    final int currentVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
                    emitter.onNext(getVolumeLevelPercent(currentVolume, maxVolume));
                }
            };

            mContext.getContentResolver().registerContentObserver(
                    Settings.System.CONTENT_URI, true, volumeObserver);

            emitter.setCancellation(() -> {
                mContext.getContentResolver().unregisterContentObserver(volumeObserver);
            });

            final int currentVolume = audioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
            emitter.onNext(getVolumeLevelPercent(currentVolume, maxVolume));
        }, Emitter.BackpressureMode.DROP)
                .distinctUntilChanged();
    }

    /**
     * This  method is used to retrieve details of device.
     * It will contains build version, device id and os version.
     *
     * @return EnvironmentInfo object
     */
    public Single<EnvironmentInfo> getDeviceInfo() {
        return Single.just(EnvironmentInfo.create(Build.VERSION.RELEASE,
                String.format("%s(%s)", BuildConfig.VERSION_NAME,
                        BuildConfig.VERSION_CODE), Build.MODEL));
    }

    /**
     * This method is used to retrieve device token that is unique token generated by fcm
     *
     * @return String variable contains device token
     */
    public String getDeviceToken() {
        return FirebaseInstanceId.getInstance().getToken();
    }

    /**
     * To check if push notifications are enbabled.
     *
     * @return boolean value
     */
    public boolean isPushEnabled() {
        return NotificationManagerCompat.from(mContext).areNotificationsEnabled();
    }

    /**
     * To check if camera permissions are granted.
     * @return boolean value
     */
    public boolean isCameraPermissionGranted() {
        return PermissionUtils.isPermissionGranted(mContext, android.Manifest.permission.CAMERA);
    }

    /**
     * To check if location permission granted.
     * @return boolean value
     */
    public boolean isLocationPermissionGranted() {
        return PermissionUtils.isPermissionGranted(mContext, Manifest.permission.ACCESS_COARSE_LOCATION) &&
                PermissionUtils.isPermissionGranted(mContext, Manifest.permission.ACCESS_FINE_LOCATION);
    }

    /**
     * This method is used to return the maxi percentage level of volume. it will be returned by
     * using specified value of current volume and max value, and calculated by using {@code}
     *
     * @param current
     * @param max
     * @return
     */
    private int getVolumeLevelPercent(int current, int max) {
        return (int) (((double) current / max) * 100);
    }
}
